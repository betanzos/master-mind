@startuml
namespace mastermind {
    class MasterMind {
        +play()
    }
    MasterMind *--> views.MainView
}

namespace models {
    class Game {
        +hasWon(): boolean
        +isEnded(): boolean
        +totalAttempts(): int
        +getSecretCombinationAsString(): String
        +getAttemptAsString(int): String
        +recordAttempt(Combination)
    }
    Game *--> SecretCombination
    Game *--> "0..10" Attempt
    Game ..> Combination : use

    class Combination {
        +addColor(Color)
        +isComplete(): boolean
        +toString(): String
    }
    Combination o--> "4" types.Color

    class SecretCombination {
        +match(Combination): MatchResult
        +toString(): String
    }
    SecretCombination ..> Combination : use
    SecretCombination ..> MatchResult : return
    SecretCombination ..> types.Color : use
    SecretCombination -up-|> Combination

    class Attempt {
        +validateMatches(SecretCombination)
        +hasFourBlack(): boolean
        +toString():String
    }
    Attempt *--> Combination
    Attempt o--> MatchResult
    Attempt ..> SecretCombination : use

    class MatchResult {
        +blacks: int
        +whites: int
        +hasFourBlack(): boolean
        +toString(): String
    }
}

namespace types {
    enum Color {
        +RED
        +BLUE
        +YELLOW
        +GREEN
        +ORANGE
        +PURPLE

        +{static}parseSymbol(char): Color
        +{static}getAllowedSymbolsString(): String
        +getSymbol(): char
    }
}

namespace utils {
    class Console {
        +readString(String): String
        +writeln(String)
    }
}

namespace views {
    abstract class ConsoleView {
    }
    ConsoleView *--> utils.Console

    class MainView extends ConsoleView {
        +show()
    }
    MainView -right-> "1..*" GameView
    MainView -down-> "1..*" models.Game

    class GameView extends ConsoleView {
        +show()
    }
    GameView *-right-> ProposedCombinationView
    GameView *--> models.Game

    class ProposedCombinationView extends ConsoleView {
        +getProposedCombination(): Combination
    }
    ProposedCombinationView ..> models.Combination : use and return
    ProposedCombinationView ..> types.Color : use
}
@enduml